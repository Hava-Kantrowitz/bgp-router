#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, math

DEBUG = True
#DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None
    as_num = None

    def __init__(self, networks, as_num):
        self.routes = []
        self.updates = {}
        self.relations = {}
        self.sockets = {}
        self.as_num = as_num
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG: 
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        for entry in self.routes:
            ip = entry["network"].split(".")
            netmask = entry["netmask"].split(".")
            #print("asdfasdfsadfsadfasdf", type(bin(5)))

            mask_bit = "".join([ format(int(quad), "08b") for quad in netmask ])
            num_ones = mask_bit.count("1")
            #print("num ones: ", num_ones)
            ip_bin = "".join([ format(int(quad), "08b") for quad in ip ])
            ip_start = ip_bin[:num_ones]
            #print("starttttttttttttttttttttt:", ip_start)
            daddr_bin = "".join([ format(int(quad), "08b") for quad in daddr.split(".") ])
            if daddr_bin.startswith(ip_start):
                outroutes.append(entry)

        #print("outroutessssssssssssssssssssss", outroutes)
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes
            
    def get_highest_preference(self, routes):
        """ select the route with the highest local pref """
        # TODO
        prefList = []
        for val in routes: 
            prefList.append(self.updates[val["peer"]]["msg"]["localpref"]) 
        highestVal = max(prefList) 
        outroutes = []
        for val in routes:
            if self.updates[val["peer"]]["msg"]["localpref"] == highestVal:
                outroutes.append(val)
        return outroutes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        # TODO
        outroutes = []
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        # TODO
        outroutes = []
        return outroutes

    def filter_relationships(self, recRelation, routes, src):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        #print("ROUTES IN FILTER ISSSSSSSSS:", routes)
        if recRelation == CUST: 
            for val in routes: 
                if val["peer"] != src: 
                    outroutes.append(val) 
            return outroutes
        for val in routes: 
            ip = val["peer"]
            relation = self.relations[ip] 
            if relation == CUST: 
                outroutes.append(val)
        return outroutes

    def check_route_len(self, routes):
        if len(routes) == 1:
            return self.sockets[routes[0]["peer"]]
        elif len(routes) == 0: 
            return None
        return 100

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        print("DADDR IS", daddr) 
        routes = self.lookup_routes(daddr)
        print("ROUTES FROM LOOKUP IS", routes)
        if self.check_route_len(routes) != 100: 
            return self.check_route_len(routes) 
        else: 
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            #routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            #routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            #routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            # TODO
            # Final check: enforce peering relationships
            
            routes = self.filter_relationships(recRelation, routes, src) 
            return self.sockets[routes[0]["peer"]] 

    def forward(self, srcif, packet):
        """	Forward a data packet	"""
        # TODO: will need to massively update this 
        #print("PACKET FROM DATA: {0}".format(packet))
        #print("ROUTING TABLE IS: {0}".format(self.routes))
        dest = packet["dst"]
        chosen_router = self.get_route(srcif, dest)
        #TODO implement most specific route and business routes
        outroutes = []
        #print("THIS IS FOR FORWARD:", json.dumps(packet).encode("ascii"))
        chosen_router.send(json.dumps(packet).encode("ascii"))
        #return may need to be changed 
        return True

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        #print("WE ARE IN UPDATE!!")
        packet["msg"]["ASPath"].append(self.as_num) 
        self.updates[packet["src"]] = packet
        self.routes.append({"network": packet["msg"]["network"],
                            "netmask": packet["msg"]["netmask"], 
                            "peer": packet["src"],
                            "us": packet["dst"]})
        
        relation = packet["src"]
        recRelation = self.relations[relation]
        outRoutes = self.filter_relationships(recRelation, self.routes, relation)
        for item in outRoutes:
            newpacket = {"src": item["us"], "dst": item["peer"], "type": "update", "msg": packet["msg"]} #sends incoming packet to a peer
            print("UPDATE TO OUTROUTE:", json.dumps(newpacket).encode("ascii"))
            self.sockets[item["peer"]].send(json.dumps(newpacket).encode("ascii"))
            newpacket = {"src": packet["dst"], "dst": packet["src"], "type": "update", "msg": self.updates[item["peer"]]["msg"]} #send peer to incoming packet's router
            print("UPDATE TO PACKET ROUTER:", json.dumps(newpacket).encode("ascii"))
            self.sockets[packet["src"]].send(json.dumps(newpacket).encode("ascii"))

        #    #the return true may need to be changed later
        return True
    
    def revoke(self, packet):
        """	handle revoke packets	"""
        # TODO
        return True

    def dump(self, packet):
        """	handles dump table requests	"""
        # TODO
        #print("asdfffffffffffff")
        src = packet["dst"]
        dst = packet["src"]
        a = {"src": src, "dst": dst, "type": "table", "msg": self.routes}
        #print(a)
        return a

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        #print("pckt type", packet["type"])
        # TODO
        if packet["type"] == UPDT:
            print(packet) 
            success = self.update(srcif, packet)
        elif packet["type"] == DATA:
            success = self.forward(srcif, packet)
        elif packet["type"] == DUMP:
            #print("soijfioseejfioejfojeojw", srcif)
            #print(self.dump(packet))
            #print("THIS IS DUMP", json.dumps(self.dump(packet)).encode("ascii"))
            self.sockets[srcif].send(json.dumps(self.dump(packet)).encode("ascii"))
            #print("asdf")
        elif packet["type"] == RVKE:
            success = self.revoke(packet)
        elif packet["type"] == NRTE:
            success = False
        
        return success

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            #print(socks)
            for conn in socks:
                try:
                    k = conn.recv(65535)
                
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                            #print(srcif)
                    msg = json.loads(k)
                    #print(type(msg))
                    #print(msg)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return

if __name__ == "__main__":
    #print(args.networks[1:])
    as_num = args.networks[0]
    router = Router(args.networks[1:], as_num)
    router.run()
