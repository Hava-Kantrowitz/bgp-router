#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, math

DEBUG = True
#DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None
    as_num = None
    revokes = None
    
    def __init__(self, networks, as_num):
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        self.as_num = int(as_num)
        self.revokes = []
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG: 
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def print_table(self):
        print("\nTable\n")
        for route in self.routes:
            print("peer:", route["peer"], "\nus:", route["us"], "\nvarats:")
            for varat in route["varats"]:
                print("    network:", varat["network"], " netmask:", varat["netmask"], 
                      " localpref:", varat["localpref"], "\n    selfOrigin:", varat["selfOrigin"], 
                      " ASPath:", varat["ASPath"], " origin:", varat["origin"], "\n")

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        outroutes = []
        for entry in self.routes:
            for varat in entry["varats"]:
                ip = varat["network"].split(".")
                netmask = varat["netmask"].split(".")

                mask_bit = "".join([ format(int(quad), "08b") for quad in netmask ])
                num_ones = mask_bit.count("1")
                ip_bin = "".join([ format(int(quad), "08b") for quad in ip ])
                ip_start = ip_bin[:num_ones]
                daddr_bin = "".join([ format(int(quad), "08b") for quad in daddr.split(".") ])
                if daddr_bin.startswith(ip_start):
                    outroutes.append({"peer": entry["peer"], "us": entry["us"], "ghoti": num_ones, "msg": varat})

        #print("outroutessssssssssssssssssssss", outroutes)
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        if len(routes) == 0:
            return []

        min_len = min([ len(route["msg"]["ASPath"]) for route in routes ])
        outroutes = [ route for route in routes if len(route["msg"]["ASPath"]) == min_len ]
        return outroutes
            
    def get_highest_preference(self, routes):
        """ select the route with the highest local pref """
        if len(routes) == 1: 
            return routes
        if len(routes) == 0: 
            return []
        prefList = []
        for val in routes: 
            prefList.append(val["msg"]["localpref"]) 
        highestVal = max(prefList) 
        outroutes = []
        for val in routes:
            if val["msg"]["localpref"] == highestVal:
                outroutes.append(val)
        return outroutes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []
        if len(routes) == 0:
            return routes

        for route in routes:
            if route["msg"]["selfOrigin"]:
                outroutes.append(route)
              
        if len(outroutes) == 0:
            outroutes = routes
        
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        outroutes = []
        for route in routes:
            if route["msg"]["origin"] == "IGP":
                outroutes.append(route)

        if len(outroutes) == 0:
            for route in routes:
                if route["msg"]["origin"] == "EGP":
                    outroutes.append(route)

            if len(outroutes) == 0:
                outroutes = routes

        return outroutes

    def get_longest_prefix(self, routes):
        max_ghoti = 0 #FYI - ghoti = longest prefix
        for route in routes:
            if route["ghoti"] > max_ghoti:
                max_ghoti = route["ghoti"]

        outroutes = []
        for route in routes:
            if route["ghoti"] == max_ghoti:
                outroutes.append(route)

        return outroutes

    def filter_relationships(self, recRelation, routes, src, is_forward=False, is_update=False):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        dict_entry = "src" if is_update else "peer"
        outroutes = []
        if recRelation == CUST:
            if is_forward:
                return routes

            for val in routes:
                if val[dict_entry] != src: 
                    outroutes.append(val) 

            return outroutes
        for val in routes: 
            ip = val[dict_entry]
            relation = self.relations[ip] 
            if relation == CUST: 
                outroutes.append(val)
        
        return outroutes


    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        routes = self.lookup_routes(daddr)
        # 1. Highest Preference
        routes = self.get_highest_preference(routes)
        #print("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRROuteS:", routes)
        # 2. Self Origin
        routes = self.get_self_origin(routes)
        # 3. Shortest ASPath
        routes = self.get_shortest_as_path(routes)
        # 4. EGP > IGP > UNK
        routes = self.get_origin_routes(routes)
        # 5. Longest ghoti matching
        routes = self.get_longest_prefix(routes)
        # 6. Lowest IP
        
        if len(routes) not in (0, 1):
            for i in range(0, 4):
                min_quads = []
                for route in routes:
                    min_quads.append(route["peer"].split(".")[i])
                min_quad = min(min_quads)
                routes = [ route for route in routes if route["peer"].split(".")[i] == min_quad ]

        if len(routes) == 0:
            return None
        # Final check: enforce peering relationships
        #there should only be 1 route left at this point
        #print("SRCIFFFFFFFFFFFFFFFF IS", srcif) 
        recRelation = self.relations[srcif]
        routes = self.filter_relationships(recRelation, routes, srcif, True)
        #print("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRroutes", routes)
        if len(routes) == 0:
            return None

        return self.sockets[routes[0]["peer"]] 

    def forward(self, srcif, packet):
        """	Forward a data packet	"""        
        # TODO: will need to massively update this 
        #print("PACKET FROM DATA: {0}".format(packet))
        #print("ROUTING TABLE IS: {0}".format(self.routes))
        dest = packet["dst"]
        chosen_router = self.get_route(srcif, dest)
        if chosen_router is None:
            return False

        #TODO implement most specific route and business routes
        outroutes = []
        #print("CHOSEN ROUTER ISSSSSSSSSSSSSSSSSS", chosen_router) 
        #print("THIS IS FOR FORWARD:", json.dumps(packet).encode("ascii"))
        chosen_router.send(json.dumps(packet).encode("ascii"))
        #return may need to be changed 
        return True


    def getIPPrefixBin(self, ip, netmask):
        ip = ip.split(".")
        ip_bin = "".join([ format(int(quad), "08b") for quad in ip ])
        netmask = netmask.split(".")
        mask_bin = "".join([ format(int(quad), "08b") for quad in netmask ])
        num_ones = mask_bin.count("1")
        return int(ip_bin[:num_ones])

    def coalesce(self, packet):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        print("WE ARE COALESCING!!!!!!!!!!!!!!!!!!!") 
        #three checks to determine if it can be coalesced 
        for neighbor in self.routes:
            if packet["msg"]["netmask"] != "0.0.0.0" and neighbor["peer"] == packet["src"]:
                pckt_msg = packet["msg"]
                loop_again = True
                while loop_again:
                    #they are hop neighbors 
                    #check for same attributes
                    loop_again = False
                    potentialGhoti = []
                    for item in neighbor["varats"]: 
                        if (item["netmask"] == pckt_msg["netmask"] 
                            and item["localpref"] == pckt_msg["localpref"] 
                            and item["selfOrigin"] == pckt_msg["selfOrigin"] 
                            and sorted(item["ASPath"]) == sorted(pckt_msg["ASPath"]) 
                            and item["origin"] == pckt_msg["origin"]):
                            potentialGhoti.append(item) 

                    pckt_prefix = self.getIPPrefixBin(pckt_msg["network"], pckt_msg["netmask"])
                    for ghoti in potentialGhoti:
                        ghoti_prefix = self.getIPPrefixBin(ghoti["network"], ghoti["netmask"])
                        if pckt_prefix - ghoti_prefix in (-1, 1):
                            netmask = ghoti["netmask"].split(".")
                            mask_bin = "".join([ format(int(quad), "08b") for quad in netmask ])
                            num_ones = mask_bin.count("1")
                            new_mask_bin = mask_bin[:num_ones - 1] + "0" + mask_bin[num_ones:]
                            new_netmask_decimal = []
                            for i in range(0, 4):
                                new_netmask_decimal.append(str(int(new_mask_bin[i*8:(i+1)*8], 2)))
                            
                            min_varat = pckt_msg if pckt_prefix < ghoti_prefix else ghoti
                            new_varat = {"network": min_varat["network"],
                                         "netmask": ".".join(new_netmask_decimal),
                                         "localpref": min_varat["localpref"],
                                         "selfOrigin": min_varat["selfOrigin"],
                                         "ASPath": min_varat["ASPath"],
                                         "origin": min_varat["origin"]}

                            new_varats = [new_varat]
                            for varat in neighbor["varats"]:
                                if varat["network"] not in (pckt_msg["network"], ghoti["network"]):
                                    new_varats.append(varat)
                            
                            neighbor["varats"] = new_varats
                            pckt_msg = new_varat
                            loop_again = True

        return True
    
    def update(self, srcif, packet, janky_bool=False):
        """	handle update packets	"""
        #print("WE ARE IN UPDATE!!")
        packet["msg"]["ASPath"].append(self.as_num)
        self.updates.append(packet)
        
        message_added = False
        for route in self.routes:
            if packet["src"] == route["peer"]:
                route["varats"].append(packet["msg"])
                message_added = True
                break

        if not message_added:
            self.routes.append({"peer": packet["src"],
                                "us": packet["dst"],
                                "varats": [packet["msg"]]})
        
        if not janky_bool:
            relation = packet["src"]
            recRelation = self.relations[relation]
            outRoutes = self.filter_relationships(recRelation, self.routes, relation)
            for item in outRoutes:
                newpacket = {"src": item["us"], "dst": item["peer"], "type": "update", 
                             "msg": packet["msg"]} #sends incoming packet to a peer
                #print("UPDATE TO OUTROUTE:", json.dumps(newpacket).encode("ascii"))
                self.sockets[item["peer"]].send(json.dumps(newpacket).encode("ascii"))

        
        
            outRoutes = self.filter_relationships(recRelation, self.updates, relation, is_update=True)
        
            if not message_added:
                for update in outRoutes:
                    new_packet = {"src": packet["dst"], "dst": packet["src"], "type": "update", "msg": update["msg"]}
                    self.sockets[srcif].send(json.dumps(new_packet).encode("ascii")) #send peer to incoming packet's router
        
        self.coalesce(packet)
        return True
   
    def uncombine(self, element, neighbor, src):
        print("WE ARE UNCOMBINING!!!!!!!!!!")
        updates_set = []
        revokes_set = []
        #print("SRC ISSSSSSSSSSSSS", src)
        #print("OLD UPDATESSSSSSSSSSS", self.updates)
        for val in self.updates:
         #   print("VAL SRC ISSSSSSSSSSSSSS", val["src"])
         #   print("ELT NETWORK ISSSSSS", element["network"])
         #   print("VAL NETWORK ISSSSS", val["msg"]["network"]) 
         #   print("ELT NETMASK ISSSSSSSS", element["netmask"])
         #   print("VAL NETMASK ISSSSSSS", val["msg"]["netmask"])
            if (src == val["src"] and (element["network"] != val["msg"]["network"] or element["netmask"] != val["msg"]["netmask"])):
                updates_set.append(val)
        for val in self.revokes: 
            if src == val["src"]: 
                revokes_set.append(val)
        #print("NEWWWWWWWWWWWW UPDATES", updates_set)
        #print("NEWWWWWWWWWWWWWWW REVOKESSSSS", revokes_set)  
        final_updates = []
        for val in updates_set:
            belongs = True  
            for val2 in revokes_set: 
                if val["msg"]["network"] == val2["network"] and val["msg"]["netmask"] == val2["netmask"]:
                    belongs = False
            if belongs: 
                final_updates.append(val)
        #print("UPDATES ISSSS", final_updates)
        for val in self.routes: 
            if src == val["peer"]: 
                val["varats"] = []
        for val in final_updates: 
            janky_bool = True 
            self.update(src, val, janky_bool)
        
        
 
    def revoke(self, packet):
        """	handle revoke packets	"""
        #print("WE ARE REVOKING")
        for item in packet["msg"]:
            new_dict = {"src": packet["src"], "dst": packet["dst"], "network": item["network"], "netmask": item["netmask"]}
            self.revokes.append(new_dict)
        deadRoutes = []
        for val in packet["msg"]:
            for route in self.routes:
                if packet["src"] == route["peer"]:
                    matches = False
                    for varat in route["varats"]: 
                        if (val["network"] == varat["network"] and val["netmask"] == varat["netmask"]):
                           matches = True
                    if not matches: 
                        self.uncombine(val, route, packet["src"])
                    else:  
                        new_varats = []
                        for varat in route["varats"]:
                            if not (val["network"] == varat["network"] and val["netmask"] == varat["netmask"]):
                                new_varats.append(varat)

                        route["varats"] = new_varats

        relation = packet["src"]
        recRelation = self.relations[relation]
        outRoutes = self.filter_relationships(recRelation, self.routes, relation)

        for route in outRoutes:
            packet["src"] = route["us"]
            packet["dst"] = route["peer"]
            self.sockets[packet["dst"]].send(json.dumps(packet).encode("ascii"))

        return True

    def dump(self, packet):
        """	handles dump table requests	"""
        #self.print_table()
        src = packet["dst"]
        dst = packet["src"]
        routes_dump = []
        for route in self.routes:
            for verat in route["varats"]:
                routes_dump.append({"network": verat["network"], "netmask": verat["netmask"],
                                    "peer": route["peer"]})
        
        a = {"src": src, "dst": dst, "type": "table", "msg": routes_dump}
        return a

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        #print("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbluub")
        if packet["type"] == UPDT:
            success = self.update(srcif, packet)
        elif packet["type"] == DATA:
            success = self.forward(srcif, packet)
        elif packet["type"] == DUMP:
            #print("THIS IS DUMP", json.dumps(self.dump(packet)).encode("ascii"))
            self.sockets[srcif].send(json.dumps(self.dump(packet)).encode("ascii"))
            success = True
        elif packet["type"] == RVKE:
            success = self.revoke(packet)
        elif packet["type"] == NRTE:
            success = False
        
        return success

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        #print("THIS IS CONNNNNNNNNNNNNNNNNNNN", conn.getsockname(), conn.getpeername()) 
        usIP = conn.getpeername()[:-1] + "1" 
        #print(usIP) 
        no_route = {"src": usIP, "dst": msg["src"], "type": "no route", "msg": {}}
        conn.send(json.dumps(no_route).encode("ascii"))
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            #print(socks)
            for conn in socks:
                try:
                    k = conn.recv(65535)
                
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                            #print(srcif)
                    msg = json.loads(k)
                    #print(type(msg))
                    #print(msg)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return

if __name__ == "__main__":
    as_num = args.networks[0]
    router = Router(args.networks[1:], as_num)
    router.run()
